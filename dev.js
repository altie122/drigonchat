// run-dev script code
// Generated by ChatGPT
// This code does not fall under the LICENSE as defined in the root folder

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// Helper function to generate a random color ANSI code
const randomColor = () => {
  const colors = [
    "\x1b[31m", // Red
    "\x1b[32m", // Green
    "\x1b[33m", // Yellow
    "\x1b[34m", // Blue
    "\x1b[35m", // Magenta
    "\x1b[36m", // Cyan
    // "\x1b[37m", // White
  ];
  return colors[Math.floor(Math.random() * colors.length)];
};

// Function to execute the `pnpm run dev` command in a given folder
const runPnpmDev = (folder, color, prefix) => {
  return new Promise((resolve, reject) => {
    console.log(`${color}${prefix}\x1b[0m: Starting pnpm run dev`);

    const devProcess = spawn('pnpm', ['run', 'dev'], { cwd: folder, stdio: ['pipe', 'pipe', 'pipe'] });

    // Add prefix and color to stdout
    devProcess.stdout.on('data', (data) => {
      process.stdout.write(`${color}${prefix}\x1b[0m: ${data}`);
    });

    // Add prefix and color to stderr
    devProcess.stderr.on('data', (data) => {
      process.stderr.write(`${color}${prefix}\x1b[0m: ${data}`);
    });

    devProcess.on('error', (error) => {
      console.error(`${color}${prefix}\x1b[0m: Failed to run dev: ${error.message}`);
      reject(error);
    });

    devProcess.on('exit', (code) => {
      if (code === 0) {
        console.log(`${color}${prefix}\x1b[0m: Successfully ran dev`);
        resolve();
      } else {
        console.error(`${color}${prefix}\x1b[0m: Dev process exited with code ${code}`);
        reject(new Error(`Dev process exited with code ${code}`));
      }
    });
  });
};

// Main function to run the dev server in sub-folders
const main = async () => {
  // Parse the command-line arguments to get specific folders (if provided)
  const args = process.argv.slice(2);
  const specificFolders = args.length > 0 ? args : null;

  // Get a list of sub-folders in the current directory
  const parentDir = path.resolve(__dirname);
  const subFolders = fs
    .readdirSync(parentDir, { withFileTypes: true })
    .filter((dir) => dir.isDirectory())
    .map((dir) => path.join(parentDir, dir.name));

  // If specific folders are provided, filter them
  const foldersToProcess = specificFolders
    ? subFolders.filter((folder) =>
        specificFolders.some((specificFolder) => folder.includes(specificFolder))
      )
    : subFolders;

  // Assign a random color and prefix for each folder
  const folderConfigs = foldersToProcess.map((folder) => ({
    folder,
    color: randomColor(),
    prefix: path.basename(folder).toUpperCase(),
  }));

  // Run `pnpm run dev` on the selected folders concurrently
  try {
    const results = await Promise.all(
      folderConfigs.map(({ folder, color, prefix }) => runPnpmDev(folder, color, prefix))
    );
    console.log('All servers are running:', results);
  } catch (error) {
    console.error('An error occurred while running the dev servers:', error);
  }
};

main();
